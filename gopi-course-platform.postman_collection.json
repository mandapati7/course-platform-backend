{
	"info": {
		"_postman_id": "your-collection-id",
		"name": "Gopi Course Platform API",
		"description": "API collection for the course platform",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5011/api/v1",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register Instructor",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Instructor\",\n    \"email\": \"instructor@example.com\",\n    \"password\": \"Password123!\",\n    \"role\": \"instructor\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": ["{{base_url}}"],
							"path": ["auth", "register"]
						}
					}
				},
				{
					"name": "Register User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"user@example.com\",\n    \"password\": \"Password123!\",\n    \"role\": \"user\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": ["{{base_url}}"],
							"path": ["auth", "register"]
						}
					}
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"instructor@example.com\",\n    \"password\": \"Password123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": ["{{base_url}}"],
							"path": ["auth", "login"]
						}
					}
				},
				{
					"name": "Get Current User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/me",
							"host": ["{{base_url}}"],
							"path": ["auth", "me"]
						}
					}
				},
				{
					"name": "Update User Details",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Name\",\n    \"email\": \"updated@example.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/updatedetails",
							"host": ["{{base_url}}"],
							"path": ["auth", "updatedetails"]
						}
					}
				},
				{
					"name": "Update Password",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentPassword\": \"Password123!\",\n    \"newPassword\": \"NewPassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/updatepassword",
							"host": ["{{base_url}}"],
							"path": ["auth", "updatepassword"]
						}
					}
				},
				{
					"name": "Forgot Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"user@example.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/forgotpassword",
							"host": ["{{base_url}}"],
							"path": ["auth", "forgotpassword"]
						}
					}
				},
				{
					"name": "Logout",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/logout",
							"host": ["{{base_url}}"],
							"path": ["auth", "logout"]
						}
					}
				}
			]
		},
		{
			"name": "Courses",
			"item": [
				{
					"name": "Get All Courses",
					"request": {
						"method": "GET",
						"url": {
							"raw": "{{base_url}}/courses",
							"host": ["{{base_url}}"],
							"path": ["courses"]
						}
					}
				},
				{
					"name": "Create Course",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"New Test Course\",\n    \"description\": \"A comprehensive test course description that meets the length requirement\",\n    \"shortDescription\": \"A brief overview of the test course\",\n    \"price\": 99.99,\n    \"duration\": \"10 hours\",\n    \"level\": \"Beginner\",\n    \"thumbnail\": \"https://example.com/thumbnail.jpg\",\n    \"category\": \"Technology\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/courses",
							"host": ["{{base_url}}"],
							"path": ["courses"]
						}
					}
				},
				{
					"name": "Get Single Course",
					"request": {
						"method": "GET",
						"url": {
							"raw": "{{base_url}}/courses/:id",
							"host": ["{{base_url}}"],
							"path": ["courses", ":id"],
							"variable": [
								{
									"key": "id",
									"value": "course_id_here"
								}
							]
						}
					}
				},
				{
					"name": "Update Course",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Course Title\",\n    \"price\": 149.99\n}"
						},
						"url": {
							"raw": "{{base_url}}/courses/:id",
							"host": ["{{base_url}}"],
							"path": ["courses", ":id"],
							"variable": [
								{
									"key": "id",
									"value": "course_id_here"
								}
							]
						}
					}
				},
				{
					"name": "Delete Course",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/courses/:id",
							"host": ["{{base_url}}"],
							"path": ["courses", ":id"],
							"variable": [
								{
									"key": "id",
									"value": "course_id_here"
								}
							]
						}
					}
				},
				{
					"name": "Enroll in Course",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/courses/:id/enroll",
							"host": ["{{base_url}}"],
							"path": ["courses", ":id", "enroll"],
							"variable": [
								{
									"key": "id",
									"value": "course_id_here"
								}
							]
						}
					}
				},
				{
					"name": "Get Enrolled Courses",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/courses/enrolled",
							"host": ["{{base_url}}"],
							"path": ["courses", "enrolled"]
						}
					},
					"response": []
				},
				{
					"name": "Get Enrolled Courses (Alternative)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/courses?enrolled=true",
							"host": ["{{base_url}}"],
							"path": ["courses"],
							"query": [
								{
									"key": "enrolled",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Course Review",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rating\": 5,\n    \"comment\": \"Great course!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/courses/:id/reviews",
							"host": ["{{base_url}}"],
							"path": ["courses", ":id", "reviews"],
							"variable": [
								{
									"key": "id",
									"value": "course_id_here"
								}
							]
						}
					}
				},
				{
					"name": "Update Course Progress",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"progress\": 50\n}"
						},
						"url": {
							"raw": "{{base_url}}/courses/:id/progress",
							"host": ["{{base_url}}"],
							"path": ["courses", ":id", "progress"],
							"variable": [
								{
									"key": "id",
									"value": "course_id_here"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "Sections",
			"item": [
				{
					"name": "Add Section",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"Introduction Section\",\n\t\"description\": \"Overview of the course content\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/courses/:courseId/sections",
							"host": ["{{base_url}}"],
							"path": ["courses", ":courseId", "sections"],
							"variable": [
								{
									"key": "courseId",
									"value": "course_id_here"
								}
							]
						}
					}
				},
				{
					"name": "Update Section",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"Updated Section Title\",\n\t\"description\": \"Updated section description\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/courses/:courseId/sections/:sectionId",
							"host": ["{{base_url}}"],
							"path": ["courses", ":courseId", "sections", ":sectionId"],
							"variable": [
								{
									"key": "courseId",
									"value": "course_id_here"
								},
								{
									"key": "sectionId",
									"value": "section_id_here"
								}
							]
						}
					}
				},
				{
					"name": "Delete Section",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/courses/:courseId/sections/:sectionId",
							"host": ["{{base_url}}"],
							"path": ["courses", ":courseId", "sections", ":sectionId"],
							"variable": [
								{
									"key": "courseId",
									"value": "course_id_here"
								},
								{
									"key": "sectionId",
									"value": "section_id_here"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "Lessons",
			"item": [
				{
					"name": "Add Lesson",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"Introduction Lesson\",\n\t\"description\": \"First lesson of the course\",\n\t\"videoUrl\": \"https://example.com/video.mp4\",\n\t\"duration\": \"10:00\",\n\t\"isPreview\": true,\n\t\"resources\": [\"https://example.com/notes.pdf\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/courses/:courseId/sections/:sectionId/lessons",
							"host": ["{{base_url}}"],
							"path": ["courses", ":courseId", "sections", ":sectionId", "lessons"],
							"variable": [
								{
									"key": "courseId",
									"value": "course_id_here"
								},
								{
									"key": "sectionId",
									"value": "section_id_here"
								}
							]
						}
					}
				},
				{
					"name": "Update Lesson",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"title\": \"Updated Lesson Title\",\n\t\"description\": \"Updated lesson description\",\n\t\"videoUrl\": \"https://example.com/updated-video.mp4\",\n\t\"duration\": \"15:00\",\n\t\"isPreview\": false,\n\t\"resources\": [\"https://example.com/updated-notes.pdf\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/courses/:courseId/sections/:sectionId/lessons/:lessonId",
							"host": ["{{base_url}}"],
							"path": ["courses", ":courseId", "sections", ":sectionId", "lessons", ":lessonId"],
							"variable": [
								{
									"key": "courseId",
									"value": "course_id_here"
								},
								{
									"key": "sectionId",
									"value": "section_id_here"
								},
								{
									"key": "lessonId",
									"value": "lesson_id_here"
								}
							]
						}
					}
				},
				{
					"name": "Delete Lesson",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/courses/:courseId/sections/:sectionId/lessons/:lessonId",
							"host": ["{{base_url}}"],
							"path": ["courses", ":courseId", "sections", ":sectionId", "lessons", ":lessonId"],
							"variable": [
								{
									"key": "courseId",
									"value": "course_id_here"
								},
								{
									"key": "sectionId",
									"value": "section_id_here"
								},
								{
									"key": "lessonId",
									"value": "lesson_id_here"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Get All Notifications",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/notifications",
							"host": ["{{base_url}}"],
							"path": ["notifications"]
						}
					}
				},
				{
					"name": "Create Notification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Notification\",\n    \"message\": \"This is a test notification\",\n    \"recipients\": [\"user_id_here\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/notifications",
							"host": ["{{base_url}}"],
							"path": ["notifications"]
						}
					}
				},
				{
					"name": "Mark All as Read",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/notifications/read-all",
							"host": ["{{base_url}}"],
							"path": ["notifications", "read-all"]
						}
					}
				},
				{
					"name": "Mark as Read",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/notifications/:id/read",
							"host": ["{{base_url}}"],
							"path": ["notifications", ":id", "read"],
							"variable": [
								{
									"key": "id",
									"value": "notification_id_here"
								}
							]
						}
					}
				},
				{
					"name": "Delete Notification",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/notifications/:id",
							"host": ["{{base_url}}"],
							"path": ["notifications", ":id"],
							"variable": [
								{
									"key": "id",
									"value": "notification_id_here"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "Payments",
			"item": [
				{
					"name": "Process Stripe Payment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"courseId\": \"course_id_here\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/payments/stripe",
							"host": ["{{base_url}}"],
							"path": ["payments", "stripe"]
						}
					}
				},
				{
					"name": "Get Payment History",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/payments/history",
							"host": ["{{base_url}}"],
							"path": ["payments", "history"]
						}
					}
				},
				{
					"name": "Get Payment Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/payments/:id",
							"host": ["{{base_url}}"],
							"path": ["payments", ":id"],
							"variable": [
								{
									"key": "id",
									"value": "payment_id_here"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "Videos",
			"item": [
				{
					"name": "Generate Upload Ticket",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Sample Video Lesson\",\n    \"description\": \"This is a sample video for testing the Vimeo integration\",\n    \"fileSize\": 10485760\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/videos/upload-ticket/:courseId/:sectionIndex/:lessonIndex",
							"host": ["{{base_url}}"],
							"path": ["videos", "upload-ticket", ":courseId", ":sectionIndex", ":lessonIndex"],
							"variable": [
								{
									"key": "courseId",
									"value": "course_id_here",
									"description": "ID of the course"
								},
								{
									"key": "sectionIndex",
									"value": "0",
									"description": "Index of the section (zero-based)"
								},
								{
									"key": "lessonIndex",
									"value": "0",
									"description": "Index of the lesson (zero-based)"
								}
							]
						},
						"description": "Generate a Vimeo upload ticket for direct-to-Vimeo uploads. This endpoint returns an upload URL that can be used to upload a video file directly to Vimeo from the client. The fileSize parameter should be the size of the video file in bytes."
					}
				},
				{
					"name": "Confirm Upload Complete",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/videos/confirm-upload/:courseId/:sectionIndex/:lessonIndex",
							"host": ["{{base_url}}"],
							"path": ["videos", "confirm-upload", ":courseId", ":sectionIndex", ":lessonIndex"],
							"variable": [
								{
									"key": "courseId",
									"value": "course_id_here",
									"description": "ID of the course"
								},
								{
									"key": "sectionIndex",
									"value": "0",
									"description": "Index of the section (zero-based)"
								},
								{
									"key": "lessonIndex",
									"value": "0",
									"description": "Index of the lesson (zero-based)"
								}
							]
						},
						"description": "Confirm that a video upload to Vimeo is complete. This updates the lesson with video details from Vimeo, such as thumbnail, duration, etc. Call this endpoint after the client has finished uploading the video to the URL provided by the upload-ticket endpoint."
					}
				},
				{
					"name": "Get Video Playback",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/videos/playback/:courseId/:sectionIndex/:lessonIndex",
							"host": ["{{base_url}}"],
							"path": ["videos", "playback", ":courseId", ":sectionIndex", ":lessonIndex"],
							"variable": [
								{
									"key": "courseId",
									"value": "course_id_here",
									"description": "ID of the course"
								},
								{
									"key": "sectionIndex",
									"value": "0",
									"description": "Index of the section (zero-based)"
								},
								{
									"key": "lessonIndex",
									"value": "0",
									"description": "Index of the lesson (zero-based)"
								}
							]
						},
						"description": "Get video playback details for a lesson. This endpoint returns the video embed URL and HTML, which can be used to display the video in the client application. The user must be enrolled in the course (or the video must be marked as a preview) to access this endpoint."
					}
				},
				{
					"name": "Toggle Preview Status",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/videos/toggle-preview/:courseId/:sectionIndex/:lessonIndex",
							"host": ["{{base_url}}"],
							"path": ["videos", "toggle-preview", ":courseId", ":sectionIndex", ":lessonIndex"],
							"variable": [
								{
									"key": "courseId",
									"value": "course_id_here",
									"description": "ID of the course"
								},
								{
									"key": "sectionIndex",
									"value": "0",
									"description": "Index of the section (zero-based)"
								},
								{
									"key": "lessonIndex",
									"value": "0",
									"description": "Index of the lesson (zero-based)"
								}
							]
						},
						"description": "Toggle the preview status of a video lesson. Preview videos are publicly accessible, while non-preview videos are only accessible to enrolled users. This endpoint also updates the privacy settings on Vimeo accordingly."
					}
				},
				{
					"name": "Get Video Progress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.have.property('currentTime');",
									"    pm.expect(jsonData.data).to.have.property('duration');",
									"    pm.expect(jsonData.data).to.have.property('timestamp');",
									"    pm.expect(jsonData.data).to.have.property('completed');",
									"    pm.expect(jsonData.data).to.have.property('percent');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/videos/:videoId/progress",
							"host": ["{{base_url}}"],
							"path": ["videos", ":videoId", "progress"],
							"variable": [
								{
									"key": "videoId",
									"value": "vimeo_12345678",
									"description": "ID of the video in format: vimeo_12345678, youtube_abcd1234, or url_[encoded-url]"
								}
							]
						},
						"description": "Retrieve saved video progress for a specific video. Returns the last saved position, duration, completion percentage, and timestamp of when progress was last saved. If no progress exists for the video, it returns default values with 0% completion."
					}
				},
				{
					"name": "Save Video Progress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(true);",
									"    pm.expect(jsonData.data).to.have.property('currentTime');",
									"    pm.expect(jsonData.data).to.have.property('duration');",
									"    pm.expect(jsonData.data).to.have.property('timestamp');",
									"    pm.expect(jsonData.data).to.have.property('completed');",
									"    pm.expect(jsonData.data).to.have.property('percent');",
									"});",
									"",
									"pm.test(\"Saved values match sent values\", function () {",
									"    var jsonData = pm.response.json();",
									"    var requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.expect(jsonData.data.currentTime).to.eql(requestBody.currentTime);",
									"    pm.expect(jsonData.data.duration).to.eql(requestBody.duration);",
									"    pm.expect(jsonData.data.completed).to.eql(requestBody.completed);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentTime\": 120.5,\n    \"duration\": 360.0,\n    \"lessonId\": \"lesson123\",\n    \"courseId\": \"course456\",\n    \"timestamp\": {{$timestamp}},\n    \"completed\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/videos/:videoId/progress",
							"host": ["{{base_url}}"],
							"path": ["videos", ":videoId", "progress"],
							"variable": [
								{
									"key": "videoId",
									"value": "vimeo_12345678",
									"description": "ID of the video in format: vimeo_12345678, youtube_abcd1234, or url_[encoded-url]"
								}
							]
						},
						"description": "Save or update the playback progress for a specific video. Stores the current playback position, duration, and completion status. The system uses an upsert operation, so it will create a new progress record if one doesn't exist, or update the existing record if it does. This endpoint is optimized for frequent calls as users watch videos."
					}
				},
				{
					"name": "Save Video Progress - Mark Completed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Video is marked as completed\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.completed).to.eql(true);",
									"    pm.expect(jsonData.data.percent).to.eql(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentTime\": 360.0,\n    \"duration\": 360.0,\n    \"lessonId\": \"lesson123\",\n    \"courseId\": \"course456\",\n    \"timestamp\": {{$timestamp}},\n    \"completed\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/videos/:videoId/progress",
							"host": ["{{base_url}}"],
							"path": ["videos", ":videoId", "progress"],
							"variable": [
								{
									"key": "videoId",
									"value": "vimeo_12345678",
									"description": "ID of the video in format: vimeo_12345678, youtube_abcd1234, or url_[encoded-url]"
								}
							]
						},
						"description": "Mark a video as completed by sending a progress update with completed=true and currentTime equal to the full duration. This can be used when a user has finished watching a video."
					}
				},
				{
					"name": "Save Video Progress - Missing Required Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message indicates missing fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.eql(false);",
									"    pm.expect(jsonData.error).to.include('required');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lessonId\": \"lesson123\",\n    \"courseId\": \"course456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/videos/:videoId/progress",
							"host": ["{{base_url}}"],
							"path": ["videos", ":videoId", "progress"],
							"variable": [
								{
									"key": "videoId",
									"value": "vimeo_12345678",
									"description": "ID of the video in format: vimeo_12345678, youtube_abcd1234, or url_[encoded-url]"
								}
							]
						},
						"description": "Test case for error handling when required fields (currentTime and duration) are missing."
					}
				}
			],
			"description": "Endpoints for managing video content with Vimeo integration. These endpoints handle video uploads, playback, preview settings, and video progress tracking."
		}
	]
}